#!/bin/bash
#

color_warn=$( tput setaf 3; tput bold );
color_err=$( tput setaf 1; tput bold );

reset=$( tput sgr0 );


args="${*-.}"

if `puppet-lint --with-filename | grep -q 'no file specified'`; then
  lint_cmd="puppet-lint --with-filename ";
else
  lint_cmd="puppet-lint";
fi;

puppet_cmd='puppet parser validate ';

run_puppet_check() {
  local file="$1";
  eval $puppet_cmd "$file";
  return $?;
}
run_lint_check() {
  local file="$1"
  eval $lint_cmd "$file" | sed -e "s/\(.*WARNING.*\)/${color_warn}\1$reset/" -e "s/\(.*ERROR.*\)/${color_err}\1$reset/"  ;
  return $?;
}

check_erb_file() {
  local file="$1"
  erb -x -T '-' "$file" | ruby -c
  return $?;
}

check_pp_file() {
  run_puppet_check "$file" 2>/dev/null || return $?;
  run_lint_check "$file" 2>/dev/null;
  return $?;
}


check_file() {
  local file=$1 index=$2 count=$3 ext retval;
  echo " Checking file: '$file' [$index/$count]";
  ext="`echo $file | sed 's@.*\.\([^.]*\)$@\1@'`"
  case $ext in
    pp)   check_pp_file "$file";
          retval=$?;
          ;;

    erb)  check_erb_file "$file";
          retval=$?;
          ;;

    *)    ;;
  esac
  echo " ^ $retval ------------------------------------------------------"
  return $retval;
}

index=0;
count="`find $args -type f -iname '*.pp' -or -iname '*.erb' | wc -l`"
find $args -type f -iname '*.pp' -or -iname '*.erb'  | while read line; do let "index++"; check_file $line $index $count; done;

